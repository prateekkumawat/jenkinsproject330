pipeline {
    agent {
        label "devops"
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages{
        stage("Clean Workspace") { 
            steps {
                cleanWs()
            }
        }
        stage("Code Checkout"){
          steps{ 
            git url:"https://github.com/prateekkumawat/jenkinsproject330.git", branch: "main"
          }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                dir('src/') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=docker-image-push-pipeline \
                        -Dsonar.projectKey=docker-image-push-pipeline '''
                    }
                }
            }
        }
        stage('QualityGate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }

        stage("build Docker Image") { 
            steps { 
                sh "docker build --no-cache -t static ."
            }
        }

        stage("Image Push"){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockercreds', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) {
                   sh "docker tag static ${env.docker_user}/static:${BUILD_NUMBER}"
                   sh "docker login -u ${env.docker_user} -p ${env.docker_pass}"
                   sh "docker push ${env.docker_user}/static:${BUILD_NUMBER}"  
                }
            }
        }

        stage("Image Cleanup"){
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockercreds', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) {
                   sh "docker image rm -f ${env.docker_user}/static:${BUILD_NUMBER}"
                   sh "docker image rm -f static:latest"
                }   
            }
        }

        // stage("agent Deployment"){
        //     environment {
        //         SSH_CREDS = credentials('deploymentagent')
        //     }
        //     steps{
        //         //withCredentials([sshUserPrivateKey(credentialsId: 'deploymentagent', variable: 'SSH_CREDENTIALS')]){
        //         //  sh "ssh -o StrictHostKeyChecking=no -i $SSH_CREDS $SSH_CREDS_USR@172.31.18.162 'docker run -dit --name test -p 80:80 prateekkumawat/static:${BUILD_NUMBER}'"   
        //         //}

        //     }    
        // }
    }
}